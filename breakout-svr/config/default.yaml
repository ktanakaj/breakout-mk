---
  appKey: "breakout-svr"
  appName:
    en: "Breakout Maker"
    ja: "ブロックくずしメーカー"
  webappbase: "/"
  session:
    secret: "hiaihia348ghysrl8greiulahi"
    resave: false
    saveUninitialized: false
    cookie:
  database:
    dialect: "mysql"
    host: "localhost"
    port: 3306
    username: "breakout_usr"
    password: "breakout001"
    name: "breakout_db"
  redis:
    ranking:
      host: "127.0.0.1"
      port: 6379
      db: 1
    session:
      host: "127.0.0.1"
      port: 6379
      db: 2
  password:
    algorithm: "sha256"
  superAccount:
    name: 'admin'
    password: 'admin01'
    status: 'admin'
  game:
    validation:
      algorithm: "sha1"
      secret: "yt7u9rtv095wo6w9;hit6yw9"
  log4js:
    pm2: true
    appenders:
      stdout: # 標準出力
        type: 'console'
      stderr: # 標準エラー出力
        type: 'stderr'
      access: # アクセスログ
        type: "dateFile"
        filename: "/var/log/local/breakout-svr/access.log"
        pattern: "-yyyy-MM-dd"
        backups: 10
      error: # エラーログ
        type: "dateFile"
        filename: "/var/log/local/breakout-svr/error.log"
        pattern: "-yyyy-MM-dd"
        maxLogSize: 107374182400 # 100MB
      debug: # デバッグログ
        type: "file"
        filename: "/var/log/local/breakout-svr/debug.log"
        backups: 10
        maxLogSize: 10737418240 # 10MB
    categories:
      default:
        appenders:
          - 'stdout'
          - 'debug'
        level: 'debug'
      access:
        appenders:
          - 'stdout'
          - 'access'
        level: 'info'
      error:
        appenders:
          - 'stderr'
          - 'error'
        level: 'info'
  noaccesslog:
    - \.css
    - \.js
    - \.png
    - \.jpg
    - \.gif
    - \.ico
    - \.jsgz
    - \.datagz
    - \.memgz
  swagger:
    swagger: "2.0"
    info:
      title: "ブロックくずしメーカー"
      version: 0.4.1
      description: "ブロックくずしWebアプリのサーバーサイドAPI。"
    basePath: "/api"
    consumes:
      - "application/json"
    produces:
      - "application/json"
      - "text/plain"
    definitions:
      User:
        type: object
        description: ユーザー情報
        required:
          - id
          - name
          - status
        properties:
          id:
            type: integer
            format: int32
            description: ユーザーID
          name:
            type: string
            description: ユーザー名
          status:
            type: string
            description: ステータス (user/admin/disable)
            enum:
              - user
              - admin
              - disable
          comment:
            type: string
            description: ユーザーコメント
          createdAt:
            type: string
            format: date-time
            description: 登録日時
          updatedAt:
            type: string
            format: date-time
            description: 更新日時
      StageHeader:
        type: object
        required:
          - id
          - userId
          - status
        properties:
          id:
            type: integer
            format: int32
            description: ステージヘッダーID
          userId:
            type: integer
            format: int32
            description: ユーザーID
          status:
            type: string
            description: ステータス (private/public)
            enum:
              - private
              - public
          createdAt:
            type: string
            format: date-time
            description: 登録日時
          updatedAt:
            type: string
            format: date-time
            description: 更新日時
          deletedAt:
            type:
              - "string"
              - "null"
            format: date-time
            description: 削除日時
          user:
            $ref: '#/definitions/User'
      Stage:
        type: object
        required:
          - id
          - headerId
          - name
          - status
          - map
          - header
        properties:
          id:
            type: integer
            format: int32
            description: ステージID
          headerId:
            type: integer
            format: int32
            description: ステージヘッダーID
          name:
            type: string
            description: ステージ名
          status:
            type: string
            description: ステータス (latest/updated)
            enum:
              - latest
              - updated
          map:
            type: string
            description: ステージデータ
          comment:
            type: string
            description: ステージコメント
          createdAt:
            type: string
            format: date-time
            description: 登録日時
          updatedAt:
            type: string
            format: date-time
            description: 更新日時
          header:
            $ref: '#/definitions/StageHeader'
      Playlog:
        type: object
        required:
          - id
          - stageId
          - userId
          - cleared
        properties:
          id:
            type: integer
            description: プレイログID
            format: int64
          stageId:
            type: integer
            description: ステージID
            format: int32
          userId:
            type: integer
            description: ユーザーID
            format: int32
          score:
            type: integer
            description: 獲得スコア
            format: int32
          cleared:
            type: boolean
            description: クリアしたか？
          createdAt:
            type: string
            format: date-time
            description: 登録日時
          updatedAt:
            type: string
            format: date-time
            description: 更新日時
    parameters:
      yearPathParam:
        in: path
        name: year
        description: 年
        type: integer
        format: int32
      monthPathParam:
        in: path
        name: month
        description: 月
        type: integer
        format: int32
    responses:
      BadRequest:
        description: バリデーションNG
        schema:
          type: string
      Unauthorized:
        description: 認証NG
        schema:
          type: string
      Forbidden:
        description: 権限NG
        schema:
          type: string
      NotFound:
        description: 該当データ無し
        schema:
          type: string
      RankingKeys:
        description: 取得成功
        schema:
          type: array
          items:
            - type: array
              items:
                - type: string
    securityDefinitions:
      SessionId:
        type: apiKey
        in: header
        name: Cookie
        description: セッションID
  debug:
    errorMessage: true # エラーメッセージを出力する場合true
    responseValidation: true # レスポンスもバリデーションを行う場合true
    apidocs: true # api-docs.json を有効にするか
    bodyLog: true # ログにリクエスト/レスポンスボディを出力する場合true